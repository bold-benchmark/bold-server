PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX ssn: <http://www.w3.org/ns/ssn/>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX qudt: <http://qudt.org/schema/qudt#>
PREFIX brick: <http://buildsys.org/ontologies/Brick#>
PREFIX bf: <http://buildsys.org/ontologies/BrickFrame#>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX sim: <http://ti.rw.fau.de/sim#>

# occupant moves inside and outside the building

DELETE {
    ?action a sim:MoveAction ;
               sim:agent ?occupant ;
               sim:fromLocation ?oldFrom ;
               sim:toLocation ?oldTo ;
               sim:atTime ?oldTime .
} INSERT {
    ?action a sim:MoveAction ;
            sim:agent ?occupant ;
            sim:fromLocation ?oldTo ;
            sim:toLocation ?to ;
            sim:atTime ?time .
} WHERE {
    # case 1: occupant has not arrived yet -> ~50% chance to arrive after 1h
    # case 2: occupant is at their desk, soon to go for lunch -> ~50% chance to leave after 30min
    # case 3: occupant is coming back from lunch break -> ~50% chance to come back after ~30min
    # case 4: occupant is leaving the office -> ~50% chance to leave after 4h
    # note: times are in minute (simulation start at 8am)
    # TODO probabilities are crap (binomial distribution -> p = 0.5 after n draws if p = ? at each draw)
    {
        ?occupant a sim:Occupant .
        FILTER NOT EXISTS { ?action a sim:MoveAction ; sim:agent ?occupant . }

        <sim> sim:currentIteration ?time .
        BIND (0 AS ?8am)
        BIND (4 * 60 AS ?12pm)
        FILTER (?time >= ?8am && ?time < ?12pm && sim:rand(?occupant) <= 1 / 60)

        BIND (iri(concat(str(?occupant), "-move")) AS ?action)
        ?occupant sim:workplace ?to .
        BIND (sim:away AS ?oldTo)
    } UNION {
        ?action a sim:MoveAction ;
                   sim:agent ?occupant ;
                   sim:fromLocation ?oldFrom ;
                   sim:toLocation ?oldTo ;
                   sim:atTime ?oldTime .
        FILTER (?oldFrom = sim:away)
        ?occupant sim:workplace ?oldTo .

        <sim> sim:currentIteration ?time .
        BIND (4 * 60 AS ?12pm)
        BIND (6 * 60 AS ?2pm)
        FILTER (?time >= ?12pm && ?time < ?2pm && sim:rand(?occupant) <= 1 / 60)

        BIND (sim:cafeteria AS ?to)
    } UNION {
        ?action a sim:MoveAction ;
                   sim:agent ?occupant ;
                   sim:fromLocation ?oldFrom ;
                   sim:toLocation ?oldTo ;
                   sim:atTime ?oldTime .
        FILTER (?oldTo = sim:cafeteria)

        <sim> sim:currentIteration ?time .
        FILTER (sim:rand(?occupant) <= 1 / 30)

        ?occupant sim:workplace ?to .
    } UNION {
        ?action a sim:MoveAction ;
                   sim:agent ?occupant ;
                   sim:fromLocation ?oldFrom ;
                   sim:toLocation ?oldTo ;
                   sim:atTime ?oldTime .

        <sim> sim:currentIteration ?time .
        BIND (8 * 60 AS ?4pm)
        FILTER (?time >= ?4pm && sim:rand(?occupant) <= 1 / 120)

        BIND (sim:away AS ?to)
    }
    # TODO get rid of redundancy in UNION components (variable scoping problem)?
};

# occupancy sensor gets updated if move action

DELETE {
    GRAPH ?fromGraph { ?fromOccupancy rdf:value ?fromState }
    GRAPH ?toGraph { ?toOccupancy rdf:value ?toState }
} INSERT {
    GRAPH ?fromGraph { ?fromOccupancy rdf:value "off" }
    GRAPH ?toGraph { ?toOccupancy rdf:value "on" }
} WHERE {
    <sim> sim:currentIteration ?time .

    # TODO delete action when done?
    ?action a sim:MoveAction ;
            sim:agent ?occupant ;
            sim:fromLocation ?from ;
            sim:toLocation ?to ;
            sim:atTime ?time .

    OPTIONAL {
        ?from bf:hasPoint ?fromSensor .
        ?fromSensor a brick:Occupancy_Sensor ; sosa:observes ?fromOccupancy .
        ?fromOccupancy rdf:value ?fromState ;
                       foaf:isPrimaryTopicOf ?fromGraph .
    }

    OPTIONAL {
        ?to bf:hasPoint ?toSensor .
        ?toSensor a brick:Occupancy_Sensor ; sosa:observes ?toOccupancy .
        ?toOccupancy rdf:value ?toState ;
                     foaf:isPrimaryTopicOf ?toGraph .
    }
};

# illuminance sensor gets updated

DELETE {
    GRAPH ?g { ?illuminance qudt:numericValue ?oldVal }
} INSERT {
    GRAPH ?g { ?illuminance qudt:numericValue ?val }
} WHERE {
    # reference: illuminance values at https://en.wikipedia.org/wiki/Lux

    ?sim sim:currentTime ?userTime ;
         sim:sunriseTime ?sunriseTime ;
         sim:sunsetTime ?sunsetTime .

    ?userTime time:inXSDDateTimeStamp ?timestamp .
    ?sunriseTime time:inXSDDateTimeStamp ?sunriseTimestamp .
    ?sunsetTime time:inXSDDateTimeStamp ?sunsetTimestamp .

    ?sensor a brick:Luminance_Sensor ;
            bf:isLocatedIn ?room ;
            sosa:observes ?illuminance .
    ?illuminance qudt:numericValue ?oldVal ;
                 foaf:isPrimaryTopicOf ?g .
    ?room a brick:Room ;
          sim:orientation ?orientation .

	# square function to simulate the sun's rotation from sunrise until sunset
	# ?max * (1 - ((?time - ?zenith) / ?zenith)^2)

	BIND (sim:inUnixTimeStamp(?sunriseTimestamp) AS ?sunrise)
	BIND (sim:inUnixTimeStamp(?sunsetTimestamp) AS ?sunset)

	BIND (sim:inUnixTimeStamp(?timestamp) - ?sunrise AS ?time)
	BIND ((?sunset - ?sunrise) / 2 AS ?zenith)

	BIND (5000 as ?max)
    BIND (if(?time < 0 || ?time > (2 * ?zenith), 0,
          ?max * (1 - ((?time - ?zenith) / ?zenith) * ((?time - ?zenith) / ?zenith)))
          AS ?base)

    ?stimulus a sim:CloudCoverageStimulus ;
              sim:startCoverage ?start ;
              sim:endCoverage ?end .

	# linear regression between 2 reference points
	# TODO more reference points between the 2, then piecewise regression

    BIND (?start + ?time * (?end - ?start) / (?zenith * 2) AS ?cloudCover)

    # effect of room's orientation towards the sun: from 1 to 0 if east, 0 to 1 if west.

    BIND (if(?orientation = sim:east,
          1 - ?time / (?zenith * 2),
          ?time / (?zenith * 2))
          AS ?orientationFactor)

	# TODO instead, compute outside illuminance and apply a single occlusion factor for each room.
    ?room sim:occlusionFactor ?occlusionFactor .

    BIND (?base * ?cloudCover * ?orientationFactor * ?occlusionFactor AS ?val)

    # FIXME bug in rdf4j: if identical value, triple deleted but not inserted?
    FILTER (?val != ?oldVal)
}