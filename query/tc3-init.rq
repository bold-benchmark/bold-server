PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ssn: <http://www.w3.org/ns/ssn/>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX qudt: <http://qudt.org/schema/qudt#>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX brick: <http://buildsys.org/ontologies/Brick#>
PREFIX bf: <http://buildsys.org/ontologies/BrickFrame#>
PREFIX sim: <http://ti.rw.fau.de/sim#>

INSERT DATA {
	GRAPH <Building_B3> {
		<Building_B3> bf:hasPart <Floor_out> .
		<Floor_out> bf:isPartOf <Building_B3> .
	}
	GRAPH <Floor_out> {
		<Building_B3> bf:hasPart <Floor_out> .
		<Floor_out> bf:isPartOf <Building_B3> .
	}
};

INSERT {
    GRAPH <sim> {
        <sim> sim:sunriseTime [ time:inXSDDateTimeStamp ?sunrise ] ;
              sim:sunsetTime [ time:inXSDDateTimeStamp ?sunset ] .
    }
} WHERE {
    <sim> sim:currentTime ?userTime .
    ?userTime time:inXSDDateTimeStamp ?time .

    BIND (str(year(?time)) AS ?year)
    BIND (concat(if(month(?time) < 10, "0", ""), str(month(?time))) AS ?month)
    BIND (concat(if(day(?time) < 10, "0", ""), str(day(?time))) AS ?day)
    BIND (concat(?year, "-", ?month, "-", ?day) AS ?date)
    BIND (tz(?time) AS ?tz)

    # TODO compute them according to the starting date instead
    BIND ("06:00:00" AS ?sunriseTime)
    BIND ("21:00:00" AS ?sunsetTime)

    BIND (xsd:dateTime(concat(?date, "T", ?sunriseTime, ?tz)) AS ?sunrise)
    BIND (xsd:dateTime(concat(?date, "T", ?sunsetTime, ?tz)) AS ?sunset)
};

INSERT {
	[] a sim:CloudCoverageStimulus ;
	   sim:startCoverage ?start ;
	   sim:endCoverage ?end .
} WHERE {
	<sim> sim:sunriseTime ?sunriseTimestamp ;
		  sim:sunsetTime ?sunsetTimestamp .

	?sunriseTimestamp time:inXSDDateTimeStamp ?sunrise .
	?sunsetTimestamp time:inXSDDateTimeStamp ?sunset .

	# reference coverage values in [0,1] at sunrise and sunset

	BIND (sim:rand(?sunrise) AS ?start)
	BIND (sim:rand(?sunset) AS ?end)
};

DELETE {
    GRAPH ?g { ?illuminance qudt:numericValue ?oldVal }
} INSERT {
    GRAPH ?g { ?illuminance qudt:numericValue 0.0 }
} WHERE {
    ?sensor a brick:Outside_Luminance_Sensor ;
            sosa:observes ?illuminance .
    ?illuminance foaf:isPrimaryTopicOf ?g .
    OPTIONAL { ?illuminance qudt:numericValue ?oldVal }
};

DELETE {
    GRAPH ?g { ?lighting rdf:value ?oldState }
} INSERT {
    GRAPH ?g { ?lighting rdf:value ?state }
    ?lighting sim:initialValue ?state
} WHERE {
    ?switch a brick:Luminance_Command ;
            sosa:actsOnProperty ?lighting .
    ?lighting rdf:value ?oldState ;
              foaf:isPrimaryTopicOf ?g .
    BIND (if(sim:rand(?lighting) < 0.5, "on", "off") AS ?state)
}
