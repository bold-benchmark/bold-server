PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
PREFIX xsd: <http://www.w3.org/2001/XMLSchema#>
PREFIX foaf: <http://xmlns.com/foaf/0.1/>
PREFIX ssn: <http://www.w3.org/ns/ssn/>
PREFIX sosa: <http://www.w3.org/ns/sosa/>
PREFIX qudt: <http://qudt.org/schema/qudt#>
PREFIX time: <http://www.w3.org/2006/time#>
PREFIX brick: <http://buildsys.org/ontologies/Brick#>
PREFIX bf: <http://buildsys.org/ontologies/BrickFrame#>
PREFIX schema: <http://schema.org/>
PREFIX sim: <http://ti.rw.fau.de/sim#>

INSERT {
	# FIXME opening hours shoud not include a date, only time as HH:mm:ss
	GRAPH <Floor_FirstFloor> {
        <Floor_FirstFloor> schema:openingHoursSpecification [
        	schema:opens [ time:inXSDDateTimeStamp ?opening ] ;
			schema:closes [ time:inXSDDateTimeStamp ?earlyClosing ]
        ] .
    }
    GRAPH <Floor_GroundFloor> {
        <Floor_GroundFloor> schema:openingHoursSpecification [
        	schema:opens [ time:inXSDDateTimeStamp ?opening ] ;
			schema:closes [ time:inXSDDateTimeStamp ?lateClosing ]
        ] .
    }
} WHERE {
    <sim> sim:currentTime ?userTime .
    ?userTime time:inXSDDateTimeStamp ?time .

    BIND (str(year(?time)) AS ?year)
    BIND (concat(if(month(?time) < 10, "0", ""), str(month(?time))) AS ?month)
    BIND (concat(if(day(?time) < 10, "0", ""), str(day(?time))) AS ?day)
    BIND (concat(?year, "-", ?month, "-", ?day) AS ?date)
    BIND (tz(?time) AS ?tz)

    BIND ("08:00:00" AS ?openingTime)
    BIND ("19:00:00" AS ?earlyClosingTime)
    BIND ("23:00:00" AS ?lateClosingTime)

    BIND (xsd:dateTime(concat(?date, "T", ?openingTime, ?tz)) AS ?opening)
    BIND (xsd:dateTime(concat(?date, "T", ?earlyClosingTime, ?tz)) AS ?earlyClosing)
    BIND (xsd:dateTime(concat(?date, "T", ?lateClosingTime, ?tz)) AS ?lateClosing)
};

DELETE {
    GRAPH ?g { ?lighting rdf:value ?oldState }
} INSERT {
    GRAPH ?g { ?lighting rdf:value ?state }
    ?lighting sim:initialValue ?state
} WHERE {
    ?switch a brick:Luminance_Command ;
            sosa:actsOnProperty ?lighting .
    ?lighting rdf:value ?oldState ;
              foaf:isPrimaryTopicOf ?g .
    BIND (if(sim:rand(?lighting) < 0.5, "on", "off") AS ?state)
}